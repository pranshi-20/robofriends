{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardcomponent","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","React","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2OAiBeA,EAfH,SAACC,GAAW,IAChBC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,MAAOC,EAAIH,EAAJG,GACpB,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAI,SAASC,IAAK,wBAA0BH,EAAI,mBACrD,gCACC,6BAAKF,IACL,4BAAIC,WCOOK,EAbE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGZC,EAAeD,EAAOE,KAAI,SAACC,EAAMC,GACtC,OAAO,cAAC,EAAD,CAAcT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,OAA5DU,MAEnB,OACC,gCACCH,EADD,QCIaI,EAZC,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACC,qBAAKX,UAAU,MAAf,SACC,uBACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCIEI,G,MAXF,SAACnB,GACb,OACC,qBAAKoB,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAO,SAAnE,SACEvB,EAAMwB,aCqBKC,E,kDAvBd,WAAYzB,GAAO,IAAD,8BACjB,cAAMA,IACD0B,MAAM,CACVC,UAAU,GAHM,E,qDASlB,SAAkBC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAK1B,WACC,OAAGG,KAAKJ,MAAMC,SACN,wDAEDG,KAAK9B,MAAMwB,a,GApBQQ,aCkDbC,E,kDA5Cd,aAAc,IAAD,8BACZ,gBAgBDC,eAAe,SAACC,GACf,EAAKJ,SAAS,CAACjB,YAAaqB,EAAMC,OAAOC,QACzCC,QAAQC,IAAIJ,EAAMC,OAAOC,QAjBzB,EAAKX,MAAM,CACVlB,OAAQ,GACRM,YAAa,IAJF,E,qDAOb,WAAoB,IAAD,OAClB0B,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UACdF,MAAK,SAAAG,GACP,EAAKb,SAAS,CAACvB,OAAQoC,S,oBAYzB,WAAS,IAAD,OACDC,EAAgBf,KAAKJ,MAAMlB,OAAOsC,QAAO,SAAAtC,GAC9C,OAAOA,EAAOP,KAAK8C,cAAcC,SAAS,EAAKtB,MAAMZ,YAAYiC,kBAElE,OAA6B,GAA1BjB,KAAKJ,MAAMlB,OAAOyC,OACb,yCAER,sBAAK7C,UAAU,MAAf,UACC,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWW,aAAce,KAAKI,iBAC9B,cAAC,EAAD,UACC,cAAC,EAAD,UACC,cAAC,EAAD,CAAU1B,OAAQqC,e,GApCLK,IAAMlB,WCKTmB,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCGdO,IAASC,OACR,cAAC,EAAD,IAGEC,SAASC,eAAe,SAM3BX,M","file":"static/js/main.b8ef9918.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card= (props) => {\r\n\tconst {name, email, id}=props;\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-S'>\r\n\t\t\t<img alt='robots' src={\"https://robohash.org/\" + id +\"?size=200x200 \"} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\t/*if(true)\r\n\t\tthrow new Error(\"NOooooo\");*/\r\n\tconst cardcomponent= robots.map((user, i)=>{\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\t})\r\n\treturn (\r\n\t <div>\r\n\t\t{cardcomponent};\r\n\t </div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield, searchChange})=>{\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots' \r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll', border: '1px solid black', height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\thasError: false\r\n\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError: true})\r\n\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>oops. that is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\n\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper()                                                 \r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n\t\t\treturn response.json();\r\n\t\t}).then(users=>{\r\n\t\t\tthis.setState({robots: users})\r\n\t\t});\r\n\t\r\n\t}\r\n\r\n\r\n\tonSearchChange=(event)=>{\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t\tconsole.log(event.target.value);\r\n\t\t\r\n\t\r\n\t}\r\n\trender(){\r\n\t\tconst filteredRobots= this.state.robots.filter(robots=>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif(this.state.robots.length==0)\r\n\t\t\treturn <h1>Loading</h1>\r\n\treturn (\r\n\t\t<div className='tc '>\r\n\t\t\t<h1 className='f1'> RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n   \t\t\t\t</ErrorBoundary>\r\n   \t\t\t</Scroll>\r\n   \t\t</div>\r\n   \t); \r\n}\r\n\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\n\r\nimport 'tachyons';\r\n\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n\t<App />\r\n\t\r\n\r\n  ,document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}